<?php
/**
 * @copyright Copyright (c) 2017 Orba Sp. z o.o. (http://orba.pl)
 */

namespace Orba\Payupl\Helper;

class CommandTest extends \Magento\Framework\TestFramework\Unit\BaseTestCase
{
    /**
     * @var \Orba\Payupl\Model\ClientFactory | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $clientFactory;

    /**
     * @var \Orba\Payupl\Model\Sales\OrderFactory | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $salesOrderFactory;

    /**
     * @var \Orba\Payupl\Model\Order | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $orderFactory;

    /**
     * @var \Orba\Payupl\Model\Client\DataValidator | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $dataValidator;

    /**
     * @var \Orba\Payupl\Model\ResourceModel\Transaction | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $resourceTransaction;

    /**
     * @var \Orba\Payupl\Model\Client | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $client;

    /**
     * @var \Orba\Payupl\Model\Client\OrderInterface | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $orderHelper;

    /**
     * @var \Orba\Payupl\Model\Sales\Order | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $salesOrder;

    /**
     * @var \Orba\Payupl\Model\Order | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $order;

    /**
     * @var \Orba\Payupl\Helper\Command | \PHPUnit_Framework_MockObject_MockObject
     */
    protected $command;

    public function setUp()
    {
        parent::setUp();
        $this->clientFactory = $this->basicMock(\Orba\Payupl\Model\ClientFactory::class);
        $this->salesOrderFactory = $this->basicMockForAutoGeneratedFactory(\Orba\Payupl\Model\Sales\OrderFactory::class);
        $this->orderFactory = $this->basicMockForAutoGeneratedFactory(\Orba\Payupl\Model\OrderFactory::class);
        $this->dataValidator = $this->objectManager->getObject(\Orba\Payupl\Model\Client\DataValidator::class);
        $this->resourceTransaction = $this->basicMock(\Orba\Payupl\Model\ResourceModel\Transaction::class);

        $this->client = $this->basicMock(\Orba\Payupl\Model\Client::class);
        $this->clientFactory->method("create")->willReturn($this->client);

        $this->salesOrder = $this->basicMock(\Orba\Payupl\Model\Sales\Order::class);
        $this->salesOrderFactory->method("create")->willReturn($this->salesOrder);

        $this->order = $this->basicMock(\Orba\Payupl\Model\Order::class);
        $this->orderFactory->method("create")->willReturn($this->order);

        $this->orderHelper = $this->getBasicMockForAbstractClass(\Orba\Payupl\Model\Client\OrderInterface::class);
        $this->client->method('getOrderHelper')->willReturn($this->orderHelper);

        $context = $this->objectManager->getObject(
            \Magento\Framework\App\Helper\Context::class,
            ['urlBuilder' => $this->getMockBuilder(\Magento\Framework\UrlInterface::class)->getMockForAbstractClass()]
        );

        $this->command = $this->objectManager->getObject(Command::class, [
            'context' => $context
            , 'clientFactory' => $this->clientFactory
            , 'salesOrderFactory' => $this->salesOrderFactory
            , 'orderFactory' => $this->orderFactory
            , 'dataValidator' => $this->dataValidator
            , 'resourceTransaction' => $this->resourceTransaction
        ]);
    }

    /**
     * @param string $className
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    public function getBasicMockForAbstractClass($className)
    {
        return $this->getMockBuilder($className)->getMockForAbstractClass();
    }

    /**
     * @param string $className
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    public function basicMockForAutoGeneratedFactory($className)
    {
        return $this->getMockBuilder($className)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();
    }

    public function testIsInvalidIncrementOrderId()
    {
        $this->assertFalse($this->command->isInvalidIncrementOrderId("ABC"));
        $this->assertStringStartsWith("ID of order to retrieve is empty.", $this->command->isInvalidIncrementOrderId(""));
    }

    public function testIsInvalidOrder()
    {
        $salesOrder = null;
        $this->assertStringStartsWith("Order not found.", $this->command->isInvalidOrder($salesOrder));
        $salesOrder = $this->basicMock(\Orba\Payupl\Model\Sales\Order::class);
        $salesOrder->expects($this->exactly(2))->method("getId")->willReturnOnConsecutiveCalls(null, '123');
        $this->assertStringStartsWith("Order not found.", $this->command->isInvalidOrder($salesOrder));
        $this->assertFalse($this->command->isInvalidOrder($salesOrder));
    }

    public function testIsInvalidPayuplOrderId()
    {
        $payuplOrderId = 'ABC';
        $this->orderHelper->expects($this->exactly(2))->method("validateRetrieve")->willReturnOnConsecutiveCalls(false, true);
        $this->assertStringStartsWith("Payu.pl order ID", $this->command->isInvalidPayuplOrderId($payuplOrderId));
        $this->assertFalse($this->command->isInvalidPayuplOrderId($payuplOrderId));
    }

    public function testIsInvalidPayuplStatus()
    {
        $status = 'dummy-status';
        $this->orderHelper->expects($this->exactly(2))->method("getStatusDescription")->with($status)->willReturnOnConsecutiveCalls('dummy description', false);
        $this->assertFalse($this->command->isInvalidPayuplStatus($status));
        $this->assertStringStartsWith("Invalid status code", $this->command->isInvalidPayuplStatus($status));
    }

    public function testIsInvalidAmount()
    {
        $this->assertFalse($this->command->isInvalidAmount(10));
        $this->assertFalse($this->command->isInvalidAmount('10'));
        $this->assertFalse($this->command->isInvalidAmount(1.10));
        $this->assertFalse($this->command->isInvalidAmount('1.10'));
        $errorMsg = "Amount must be"; // Amount must be integer value and bigger than 0
        $this->assertStringStartsWith($errorMsg, $this->command->isInvalidAmount(0));
        $this->assertStringStartsWith($errorMsg, $this->command->isInvalidAmount('0'));
        $this->assertStringStartsWith($errorMsg, $this->command->isInvalidAmount(-1));
        $this->assertStringStartsWith($errorMsg, $this->command->isInvalidAmount('-1'));
        $this->assertStringStartsWith($errorMsg, $this->command->isInvalidAmount('foo'));
    }

    public function testGetOrderIncrementIdSuccess()
    {
        $this->assertEquals($orderIncrementId = '000000001', $this->command->getOrderIncrementId($orderIncrementId));
        $this->assertEquals($orderIncrementId = 'abc', $this->command->getOrderIncrementId($orderIncrementId));
    }

    public function getOrderIncrementIdFailDataProvider()
    {
        return [[null], [''], [' '], [0], ['0']];
    }

    /**
     * @param $orderIncrementId
     * @dataProvider getOrderIncrementIdFailDataProvider
     */
    public function testGetOrderIncrementIdFail($orderIncrementId)
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->command->getOrderIncrementId($orderIncrementId);
    }

    public function testGetOrderByOrderIncrementIdSuccess()
    {
        $orderIncrementId = '000000001';
        $this->salesOrder->expects($this->once())->method("loadByIncrementId")->with($orderIncrementId)->willReturnSelf();
        $this->salesOrder->expects($this->once())->method("getId")->willReturn('1');
        $this->assertInstanceOf('\Orba\Payupl\Model\Sales\Order', $this->command->getOrderByOrderIncrementId($orderIncrementId));
    }

    public function testGetOrderByOrderIncrementIdFail()
    {
        $orderIncrementId = '';
        $this->salesOrder->expects($this->once())->method("loadByIncrementId")->with($orderIncrementId)->willReturnSelf();
        $this->salesOrder->expects($this->once())->method("getId")->willReturn(null);
        $this->expectException(\Magento\Framework\Exception\NotFoundException::class);
        $this->command->getOrderByOrderIncrementId($orderIncrementId);
    }

    public function testGetPayuplOrderIdSuccess()
    {
        $this->orderHelper->method("validateRetrieve")->with($payuplOrderId = 'abc')->willReturn(true);
        $this->assertEquals($payuplOrderId, $this->command->getPayuplOrderId($payuplOrderId));
    }

    public function testGetPayuplOrderIdFail()
    {
        $this->orderHelper->method("validateRetrieve")->with($payuplOrderId = 'cde')->willReturn(false);
        $this->expectException(\InvalidArgumentException::class);
        $this->command->getPayuplOrderId($payuplOrderId);
    }

    public function testGetOrderByPayuplOrderIdSuccess()
    {
        $payuplOrderId = 'abc';
        $this->order->expects($this->once())->method("loadOrderByPayuplOrderId")->with($payuplOrderId)->willReturn($this->salesOrder);
        $this->salesOrder->expects($this->once())->method("getId")->willReturn('1');
        $this->assertInstanceOf('\Orba\Payupl\Model\Sales\Order', $this->command->getOrderByPayuplOrderId($payuplOrderId));
    }

    public function testGetOrderByPayuplOrderIdFail()
    {
        $payuplOrderId = 'cde';
        $this->order->expects($this->once())->method("loadOrderByPayuplOrderId")->with($payuplOrderId)->willReturn(false);
        $this->expectException(\Magento\Framework\Exception\NotFoundException::class);
        $this->command->getOrderByPayuplOrderId($payuplOrderId);
    }

    public function testGetStatusSuccess()
    {
        $status = 'existing status';
        $this->orderHelper->expects($this->once())->method("getStatusDescription")->with($status)->willReturn('description');
        $this->assertEquals($status, $this->command->getStatus($status));
    }

    public function testGetStatusFail()
    {
        $status = 'not existing status';
        $this->orderHelper->expects($this->once())->method("getStatusDescription")->with($status)->willReturn(false);
        $this->orderHelper->expects($this->once())->method("getAllStatuses")->willReturn([0 => "aaa", 10 => "bbb"]);
        $this->expectException(\InvalidArgumentException::class);
        $this->command->getStatus($status);
    }

    public function testGetAmountByAutoSuccess()
    {
        $amount = 'auto';
        $this->salesOrder->expects($this->once())->method("getId")->willReturn('1');
        $this->salesOrder->expects($this->once())->method("getGrandTotal")->willReturn(59.99);
        $this->assertSame(59.99, $this->command->getAmount($amount, $this->salesOrder));
    }

    public function testGetAmountByAutoFail()
    {
        $amount = 'auto';
        $this->salesOrder->expects($this->once())->method("getId")->willReturn(null);
        $this->expectException(\Magento\Framework\Exception\NotFoundException::class);
        $this->command->getAmount($amount, $this->salesOrder);
    }

    public function testGetAmountByValueSuccess()
    {
        $amount = '59.99';
        $this->assertSame(59.99, $this->command->getAmount($amount, $this->salesOrder));
    }

    public function testGetAmountByValueFail()
    {
        $amount = '-1.05';
        $this->expectException(\InvalidArgumentException::class);
        $this->command->getAmount($amount, $this->salesOrder);
    }
}
